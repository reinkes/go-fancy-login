name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Get commits since last tag
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "This is the first release of Fancy Login Go." >> CHANGELOG.md
        fi

        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "Download the appropriate binary for your platform from the assets below:" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- **Linux AMD64**: \`fancy-login-go-${{ steps.get_version.outputs.version }}-linux-amd64.tar.gz\`" >> CHANGELOG.md
        echo "- **Linux ARM64**: \`fancy-login-go-${{ steps.get_version.outputs.version }}-linux-arm64.tar.gz\`" >> CHANGELOG.md
        echo "- **macOS Intel**: \`fancy-login-go-${{ steps.get_version.outputs.version }}-darwin-amd64.tar.gz\`" >> CHANGELOG.md
        echo "- **macOS Apple Silicon**: \`fancy-login-go-${{ steps.get_version.outputs.version }}-darwin-arm64.tar.gz\`" >> CHANGELOG.md
        echo "- **Windows**: \`fancy-login-go-${{ steps.get_version.outputs.version }}-windows-amd64.exe.zip\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "Extract the archive and add the binary to your PATH." >> CHANGELOG.md

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload Assets
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Get build info
      id: build_info
      run: |
        echo "build_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        echo "git_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="fancy-login-go"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          BINARY_NAME="fancy-login-go.exe"
        fi

        go build -ldflags="-s -w \
          -X 'main.version=${{ needs.create-release.outputs.version }}' \
          -X 'main.buildTime=${{ steps.build_info.outputs.build_time }}' \
          -X 'main.gitCommit=${{ steps.build_info.outputs.git_commit }}'" \
          -o "${BINARY_NAME}" ./cmd

    - name: Create archive and calculate checksum
      run: |
        BINARY_NAME="fancy-login-go"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          BINARY_NAME="fancy-login-go.exe"
        fi

        # Create archive name
        ARCHIVE_NAME="fancy-login-go-${{ needs.create-release.outputs.version }}-${{ matrix.suffix }}"

        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          # Create ZIP for Windows
          zip "${ARCHIVE_NAME}.zip" "${BINARY_NAME}"
          ASSET_PATH="${ARCHIVE_NAME}.zip"
        else
          # Create tar.gz for Unix systems
          tar -czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}"
          ASSET_PATH="${ARCHIVE_NAME}.tar.gz"
        fi

        # Calculate SHA256 checksum
        sha256sum "${ASSET_PATH}" > "${ASSET_PATH}.sha256"

        echo "asset_path=${ASSET_PATH}" >> $GITHUB_ENV
        echo "checksum_path=${ASSET_PATH}.sha256" >> $GITHUB_ENV

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ env.asset_path }}
        asset_name: ${{ env.asset_path }}
        asset_content_type: application/octet-stream

    - name: Upload Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ env.checksum_path }}
        asset_name: ${{ env.checksum_path }}
        asset_content_type: text/plain

  update-latest:
    name: Update Latest Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    steps:
    - name: Update latest release
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release?.id || '${{ needs.create-release.outputs.id }}',
            make_latest: true
          })