name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=10m

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Get version info
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev-$(git rev-parse --short HEAD)")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        echo "git_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="fancy-login-go"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          BINARY_NAME="fancy-login-go.exe"
        fi

        go build -ldflags="-s -w \
          -X 'main.version=${{ steps.version.outputs.version }}' \
          -X 'main.buildTime=${{ steps.version.outputs.build_time }}' \
          -X 'main.gitCommit=${{ steps.version.outputs.git_commit }}'" \
          -o "build/${BINARY_NAME}" ./cmd

    - name: Create archive
      run: |
        cd build
        BINARY_NAME="fancy-login-go"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          BINARY_NAME="fancy-login-go.exe"
        fi

        # Create archive name
        ARCHIVE_NAME="fancy-login-go-${{ steps.version.outputs.version }}-${{ matrix.suffix }}"

        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          # Create ZIP for Windows
          zip "${ARCHIVE_NAME}.zip" "${BINARY_NAME}"
          echo "archive_name=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
        else
          # Create tar.gz for Unix systems
          tar -czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}"
          echo "archive_name=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fancy-login-go-${{ matrix.suffix }}
        path: build/${{ env.archive_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/**/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

