name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: write
  security-events: write
  actions: read

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=10m

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.22', '1.23']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      shell: bash
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.os }}-go${{ matrix.go-version }}
        path: |
          coverage.out
          coverage.html
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Run Go Security Scanner
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
      continue-on-error: true

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
          - goos: windows
            goarch: arm64
            suffix: windows-arm64.exe
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Get version info
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev-$(git rev-parse --short HEAD)")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        echo "git_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="fancy-login-go"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          BINARY_NAME="fancy-login-go.exe"
        fi

        go build -ldflags="-s -w \
          -X 'main.version=${{ steps.version.outputs.version }}' \
          -X 'main.buildTime=${{ steps.version.outputs.build_time }}' \
          -X 'main.gitCommit=${{ steps.version.outputs.git_commit }}'" \
          -o "build/${BINARY_NAME}" ./cmd

    - name: Create archive
      run: |
        cd build
        BINARY_NAME="fancy-login-go"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          BINARY_NAME="fancy-login-go.exe"
        fi

        # Create archive name
        ARCHIVE_NAME="fancy-login-go-${{ steps.version.outputs.version }}-${{ matrix.suffix }}"

        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          # Create ZIP for Windows
          zip "${ARCHIVE_NAME}.zip" "${BINARY_NAME}"
          echo "archive_name=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
        else
          # Create tar.gz for Unix systems
          tar -czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}"
          echo "archive_name=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fancy-login-go-${{ matrix.suffix }}
        path: build/${{ env.archive_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, security]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/**/*
        generate_release_notes: true
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  homebrew:
    name: Update Homebrew Tap
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v') && !github.event.release.prerelease
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Update Homebrew tap
      run: |
        # Calculate new SHA256
        SHA256=$(curl -sL https://github.com/reinkes/go-fancy-login/archive/${{ github.event.release.tag_name }}.tar.gz | sha256sum | cut -d' ' -f1)

        # Clone tap repository
        git clone https://github.com/reinkes/homebrew-tap.git tap
        cd tap

        # Update formula
        sed -i "s|url \".*\"|url \"https://github.com/reinkes/go-fancy-login/archive/${{ github.event.release.tag_name }}.tar.gz\"|" Formula/fancy-login-go.rb
        sed -i "s|sha256 \".*\"|sha256 \"$SHA256\"|" Formula/fancy-login-go.rb

        # Commit and push
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add Formula/fancy-login-go.rb
        git commit -m "Update fancy-login-go to ${{ github.event.release.tag_name }}"
        git push https://${{ secrets.HOMEBREW_TOKEN }}@github.com/reinkes/homebrew-tap.git main
      continue-on-error: true